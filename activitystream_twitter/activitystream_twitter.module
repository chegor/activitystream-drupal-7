<?php

/**
 * @file
 * The module for importing twitter activity.
 */

/**
 * Implements hook_streamapi().
 *
 * The API passes in a $user object that contains four properties:
 * uid, userid, password, feed. These properties contain the account
 * information entered into the user's settings page, along with the 
 * uid of their Drupal account.
 */
function activitystream_twitter_streamapi($user) {
  // This user doesn't have a twitter ID entered
  if (!$user->userid) {
    return;
  }

  // Use the activitystream_feed module to pull in the user's
  // tweets. 
  $user->feed = 'http://twitter.com/statuses/user_timeline/'. $user->userid .'.rss';
  $items = activitystream_feed_streamapi($user);
  foreach ($items as $tweet) {
    $userid = $user->userid .':';
    $tweet['title'] = preg_replace('/^'. $userid .' /', '', $tweet['title']);
    // If the admin has asked not to show replies, 
    // skip any tweet that starts with @
    if (variable_get('activitystream_twitter_mentions', '1') == 0 && substr($tweet['title'], 0, 1) == '@') {
      continue;
    }
    $tweet['body'] = activitystream_twitter_makelinks($tweet['body']);
    $newitems[] = $tweet;
  }
  return $newitems;
}

/**
 * Implements hook_activitystream_info().
 */
function activitystream_twitter_activitystream_info($user) {
  $info = array(
    'title' => 'Twitter',
    'profile_url' => 'http://twitter.com/'. $user->userid,
  );
  return $info;
}

/**
 * Implement a user settings form hook. Modules should build a form
 * using an array that mirrors the Drupal form API. activitystream.module
 * will add the form elements to a tab called Activity Streams on the
 * user's Profile Edit page. Fields should be named
 * yourmodulename_fieldname. For instance, to store the user ID for 
 * Flickr, the field name is activitystream_flickr_userid
 *
 * To avoid collisions with other activitystream module's forms
 * use your module's name as the form array's key.
 *
 * @param $edit
 *   The values of the form fields, used for setting defaults
 * 
 */
function activitystream_twitter_activitystream_settings(&$edit) {
  $form['activitystream_twitter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Twitter settings'),
      '#collapsible' => TRUE, 
      '#collapsed' => TRUE, 
      '#tree' => TRUE,
  );
  $form['activitystream_twitter']['activitystream_twitter_userid'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => empty($edit['activitystream_twitter_userid']) ? '' : $edit['activitystream_twitter_userid'],
    '#description' => t('The username for your Twitter account'));
  return $form;  
}

/**
 * 
 */
function activitystream_twitter_activitystream_admin() {
  $form['activitystream_twitter'] = array(
    '#type' => 'fieldset',
    '#title' => t("Twitter settings"),
    '#weight' => 1,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE
  );
  $form['activitystream_twitter']['activitystream_twitter_mentions'] = array(
    '#type' => 'radios',
    '#title' => t("Show replies?"),
    '#description' => t('Should tweets that begin with @ be displayed in the stream?'),
    '#options' => array('No','Yes'),
    '#default_value' => variable_get('activitystream_twitter_mentions', '1'),
    '#required' => FALSE
  );
  return $form;
}

/**
 * Theme function to print the Twitter icon.
 */
function theme_activitystream_twitter_icon($variables) {
  return theme('image', array('path' => drupal_get_path('module', 'activitystream_twitter') .'/twitter.png', 'alt' => 'Twitter'));
}

/**
 * Theme an ActivityStream Twitter item.
 *
 * @param $variables
 *   An associative array containing:
 *   - action: The ActivityStream activity.
 */
function theme_activitystream_twitter_item($variables) {
  $node = node_load($variables['action']['nid']);
  $date = theme('activitystream_date', array('date' => $node->created));
  $user = user_load($node->uid);
  $linked = activitystream_twitter_makelinks($node->title);
  $title = $linked[0];
  // Add twitpic thmbs to the text
  $pics = '' ;
  if ($linked[1] != '') {
    $pics .= '<br/>'. $linked[1];
  }
  $name = theme('activitystream_username', array('user' => $user));
  return '<span class="activitystream-item">'. theme('activitystream_twitter_icon') ." <span>$name ". l(t('tweeted'), $variables['action']['link']) ." \"". $title ."\" <span class=\"activitystream-created\">$date</span></span> ". l('#', 'node/'. $node->nid, array('class' => 'permalink')) . $pics .'</span>';
}

/**
 * Autolink some Twitter URLs.
 *
 * - Shows mini thumbnails for images on TwitPic.
 * - Autolink URLs, @usernames and #hashtags
 */
function activitystream_twitter_makelinks($text) {
  // twitpic images
  $pics = '';
  preg_match_all("/http:\/\/twitpic\.com\/(.*)/i", $text, $matches, PREG_PATTERN_ORDER);
  foreach ($matches[1] as $match) {
    if (!empty($match[1])) {
      $pics .= '<a href="http://twitpic.com/'. $match .'"><img src="http://twitpic.com/show/mini/'. $match .'.jpg" /></a> ';      
    }
  }
  // autolink URLS
  $text = eregi_replace('(((f|ht){1}tp://)[-a-zA-Z0-9@:%_\+.~#?&//=]+)', '<a href="\\1">\\1</a>', $text);
  $text = eregi_replace('([[:space:]()[{}])(www.[-a-zA-Z0-9@:%_\+.~#?&//=]+)', '\\1<a href="http://\\2">\\2</a>', $text);
  // @ tags for users
  $text = preg_replace('/\b@(\w*)\b/', '<a href="http://twitter.com/\\1">@\\1</a>', $text);
  // hashtags to search.twitter
  $text = preg_replace('/\b#(\w*)\b/', '<a href="http://search.twitter.com/search?q=%23\\1">#\\1</a>', $text);
  // $text = preg_replace("/<a href=\"http:\/\/twitpic\.com\/(.*)\">http:\/\/twitpic\.com\/(.*)<\/a>/i", 
  //                     "<a href=\"http://twitpic.com/$1\"><img src=\"http://twitpic.com/show/mini/$1.jpg\" /></a>", $text);
  return array($text, $pics);
}

/**
 * Implements hook_theme().
 */
function activitystream_twitter_theme() {
  return array(
    'activitystream_twitter_icon' => array(
      'variables' => array(),
    ),
    'activitystream_twitter_item' => array(
      'variables' => array('activity' => NULL),
    ),
  );
}
